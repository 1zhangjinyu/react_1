{"version":3,"sources":["components/Input.js","components/List.js","pages/TodoList.js","index.js"],"names":["Input","this","input","focus","htmlFor","id","ref","info","value","props","inpValue","type","onChange","handleChange","onClick","addTodo","Component","List","arr1","todos","filter","item","done","arr2","length","renderTodos","TodoList","e","setState","target","state","title","removeTodo","idx","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","dangerouslySetInnerHTML","__html","localStorage","getItem","setItem","ReactDOM","render","document","getElementById"],"mappings":"6KA0BeA,E,kLAtBPC,KAAKC,MAAMC,U,+BAGL,IAAD,OAEL,OACI,6BACI,2BAAOC,QAAQ,OAAf,YACA,2BACAC,GAAG,MACHC,IAAK,SAAAC,GAAI,OAAE,EAAKL,MAAQK,GACxBC,MAAOP,KAAKQ,MAAMC,SAClBC,KAAK,OACLC,SAAUX,KAAKQ,MAAMI,eAErB,4BAAQC,QAASb,KAAKQ,MAAMM,SAA5B,qB,GAjBIC,aCqBLC,E,uKAlBP,IAAIC,EAAOjB,KAAKQ,MAAMU,MAAMC,QAAO,SAACC,GAAD,OAASA,EAAKC,QAC7CC,EAAOtB,KAAKQ,MAAMU,MAAMC,QAAO,SAACC,GAAD,OAAQA,EAAKC,QAEhD,OACI,6BACI,uDAASJ,EAAKM,QACd,4BACKvB,KAAKQ,MAAMgB,aAAY,IAE5B,uDAASF,EAAKC,QACd,4BACKvB,KAAKQ,MAAMgB,aAAY,S,GAdzBT,aC2EJU,E,kDAxEX,aAAc,IAAD,8BACT,gBAcJb,aAAe,SAACc,GACZ,EAAKC,SAAS,CAAClB,SAASiB,EAAEE,OAAOrB,SAhBxB,EAkBbO,QAAU,WACkB,IAArB,EAAKe,MAAMpB,WAGd,EAAKkB,SAAS,CACVT,MAAM,CACF,CACIY,MAAM,EAAKD,MAAMpB,SACjBY,MAAK,IAHR,mBAKE,EAAKQ,MAAMX,UAGtB,EAAKS,SAAS,CAAClB,SAAS,OA/Bf,EAoCbsB,WAAa,SAACC,GACV,EAAKL,SAAS,CACVT,MAAM,EAAKW,MAAMX,MAAMC,QAAO,SAACC,EAAKa,GAAN,OAAcA,GAAOD,QAtC9C,EAyCbE,OAAS,SAACD,GACN,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKT,MAAMX,QACpDiB,EAASF,GAAOZ,MAAQc,EAASF,GAAOZ,KACxC,EAAKM,SAAS,CACVT,MAAMiB,KA7CD,EAgDbX,YAAc,SAACH,GACX,OAAO,EAAKQ,MAAMX,MAAMqB,KAAI,SAACC,EAAKR,GAC9B,GAAGX,GAAMmB,EAAKnB,KACV,OAAO,4BACH,2BAAOR,QAAS,kBAAI,EAAKqB,OAAOF,IAAMS,QAASD,EAAKnB,KAAMX,KAAK,aAC/D,0BAAMgC,wBAAyB,CAACC,OAAOH,EAAKV,SAC5C,4BAAQjB,QAAS,kBAAI,EAAKkB,WAAWC,KAArC,qBApDZ,EAAKH,MAAQ,CACTpB,SAAU,GACVS,MAAM,IAJD,E,gEAQT,IAAIA,EAAQ0B,aAAaC,QAAQ,SAC9B3B,GACClB,KAAK2B,SAAS,CACVT,MAAMkB,KAAKC,MAAMnB,O,2CAuBzB0B,aAAaE,QAAQ,QAAQV,KAAKE,UAAUtC,KAAK6B,MAAMX,U,+BA2BhD,IAAD,EACmBlB,KAAK6B,MAAvBX,EADD,EACCA,MAAMT,EADP,EACOA,SACb,OACI,6BACI,kBAAC,EAAD,CAAOA,SAAUA,EAAUK,QAASd,KAAKc,QAASF,aAAcZ,KAAKY,eACrE,kBAAC,EAAD,CAAMM,MAAOA,EAAOM,YAAaxB,KAAKwB,mB,GAnE/BT,aCEvBgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.6f296897.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n    componentDidMount(){       // 页面挂载完时调用\r\n        this.input.focus();    // 页面加载成功后获得焦点\r\n    }\r\n   \r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"inp\">todoList</label>\r\n                <input \r\n                id=\"inp\" \r\n                ref={info=>this.input = info}\r\n                value={this.props.inpValue} \r\n                type=\"text\" \r\n                onChange={this.props.handleChange}\r\n                />\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react'\r\n\r\nclass List extends Component {\r\n    \r\n    render() {\r\n        let arr1 = this.props.todos.filter((item)=>!item.done)\r\n        let arr2 = this.props.todos.filter((item)=>item.done)\r\n\r\n        return (\r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\nimport Input from '../components/Input';\r\nimport List from '../components/List';\r\n\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    componentDidMount(){       // 页面挂载完时调用\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue==''){          // 内容为空时，不添加\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos:[\r\n                {\r\n                    title:this.state.inpValue,\r\n                    done:false\r\n                },\r\n                ...this.state.todos       // 扩展\r\n            ]\r\n        })\r\n        this.setState({inpValue:''});       // 保证每次添加完后，文本框内容为空\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem('todos',JSON.stringify(this.state.todos));\r\n    }\r\n    removeTodo = (idx)=>{\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index!=idx)\r\n        })\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))    // 深拷贝\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{        \r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input onClick={()=>this.toggle(idx)} checked={todo.done} type=\"checkbox\"/>\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>              \r\n                    <button onClick={()=>this.removeTodo(idx)}>删除</button>\r\n                </li>\r\n            }\r\n            \r\n        })\r\n    }\r\n   \r\n     render() {       \r\n        const {todos,inpValue} = this.state;\r\n        return (\r\n            <div>\r\n                <Input inpValue={inpValue} addTodo={this.addTodo} handleChange={this.handleChange}/>\r\n                <List todos={todos} renderTodos={this.renderTodos}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList; \r\n\r\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './pages/TodoList';\n\n\n\nReactDOM.render(\n  <TodoList />,\n  document.getElementById('root')\n); \n\n\n\n\n\n\n\n// import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\n// import Home from './pages/Home';\n// import Control from './components/Control';\n// import Demo01 from './pages/Demo01';\n// import App from './pages/App';\n// import HOC,{Detail} from './pages/HOC';\n// import Hook from './pages/Hook';\n// import Context from './pages/Context';\n\n\n// ReactDOM.render(\n//   // <Home/>,\n//   // <Control />,\n//   // <Demo01 name='13'/>,\n//   // <App/>,\n\n//   // <div>\n//   //   <HOC /><Detail name='Tom'/>\n//   // </div>,\n//   <Context.Provider value='123'>\n//     <Hook />\n//   </Context.Provider>,\n//   document.getElementById('root')\n// ); \n\n\n\n\n// 按住alt，鼠标点击\n// alt shift + 上下键   复制一行\n// alt + 上下键   移动一行\n// Ctrl + 左右键     一个单词一个单词的移动\n// Ctrl + shift + 左右键，选中整个单词\n// ctrl+shift+L \n\n\n// // List被引入到普通组件中的List.js中\n// let List = (props)=>{\n//   return <ul>\n//     {\n//       props.data.map((item)=><li key={item.id}>{item.title}</li>)\n//     }\n//   </ul>\n// }\n\n/*\n// Buttons被引入到普通组件中的Buttons.js中\nconst Buttons = ()=>{\n  const btns = [1,2,3,4,5];\n  const handleCLick = (num)=>{\n    // num表示事件对象，事件触发函数的第一个参数\n    console.log(num);\n  }\n  return <div>\n    {\n      btns.map((item)=><button key={item} onClick={()=>handleCLick(item)}>{item}</button>)   //key必须是独一无二的，并且随着浏览器的刷新不会改变\n    }\n  </div>\n}\n*/\n\n\n// // 类Home已引入到pages（大组件）中的Home.js中\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[]\n//     }\n//     // 通过 bind 绑定 this\n//     // this.handleCLick = this.handleCLick.bind(this);\n//     console.log('construct');\n//   }\n//   componentDidMount(){\n//     console.log('didmount');\n//     fetch('https://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       console.log(data);\n//       this.setState({data})\n//     })\n//   }\n\n//   // handleCLick(){\n//   //   console.log(this);    // undefined,类的方法默认是不会绑定 this 的\n//   //   // console.log('hello');\n//   // }\n\n\n//   // // 箭头函数绑定this\n//   // handleCLick=()=>{\n//   //   // console.log(this);\n//   // }\n\n//   getData=(page)=>{\n//     fetch('https://cnodejs.org/api/v1/topics?page='+page)\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       this.setState({data})\n//     })\n//   }\n\n//   render(){\n//     console.log('render');\n//     const { data } = this.state;\n//     const btns = [1,2,3,4,5];\n//     return <div>\n//       {/* <button onClick={this.handleCLick}>click</button> */}\n//       {/* <Buttons /> */}\n//       {\n//         btns.map((item)=><button key={item} onClick={()=>this.getData(item)}>{item}</button>)   //key必须是独一无二的，并且随着浏览器的刷新不会改变\n//       }\n//       <List data={data}/>\n//     </div>\n//   }\n// }\n\n \n\n\n\n\n\n\n\n\n\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[1,2,3]\n//     }\n//     setTimeout(() => {\n//       this.setState({data:[5,6,7,8,9]})\n//     }, 500);\n//   }\n//   render(){\n//     return <ul>\n//       {\n//         this.state.data.map(\n//           (item)=><li>{item}</li>\n//         )\n//       }\n//     </ul>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Home/>,\n//   document.getElementById('root')\n// );  \n\n\n\n\n\n// let ele = <h1 id=\"title\">hello react</h1>;\n// let ele = React.createElement('h1',{id:'title'},'hello react')\n\n\n// setInterval(()=>{\n//   let ele = <h1 id=\"title\" className=\"tit\">\n//   <div>当前时间</div>\n//   {new Date().toLocaleString()}\n//   </h1>;\n//   ReactDOM.render(\n//     ele,\n//     document.getElementById('root')\n//   );\n// },1000)\n\n\n// 组件声明\n\n// // UI（展示、木偶）组件---函数组件\n// function App(props){\n//   console.log(props);\n//   const{title,id}=props;\n//   return <div>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//     {/* <div>{props.title}</div> */}\n//   </div>\n// }\n// ReactDOM.render(\n//   <App title='可以传任意值' id='app'/>,\n//   document.getElementById('root')\n// );\n\n// // 智能组件---类组件\n/*\n// class Demo extends React.Component{\n//   constructor(){\n//     super();\n//     // 声明状态\n//     this.state={\n//       // name:'xz',\n//       name:new Date().toLocaleString()\n//     }\n//     // setTimeout(()=>{\n//     //   // this.state.name='abc';      //改不了\n//     //   this.setState({name:'abcd'})\n//     // },1000)\n//     setInterval(() => {\n//       this.setState({name:new Date().toLocaleString()})\n//     }, 1000);\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Demo title='可以传任意值' id='app'/>,\n//   document.getElementById('root')\n// );\n*/\n\n\n//将jsx对象渲染到DOM中\n/*\nlet ReactDOM = {\n  render(eleObj,container){\n    //解构\n    const { type,props } = eleObj;\n    //创建第一层节点\n    let ele = document.createElement(type);\n    // 遍历属性对象，将属性加到第一层节点对象上\n    for (const prop in props) {\n      if(prop == 'children'){\n        if(typeof props.children == 'string'){\n          const textNode = document.createTextNode(props[prop]);\n          ele.appendChild(textNode);\n          break;\n          // continue;\n        }\n        // 将第一层节点对象的子元素添加进去\n        props.children.forEach((child)=>{\n          if(typeof child == 'string'){\n            const textNode = document.createTextNode(child);\n            ele.appendChild(textNode);\n          }else{\n            ReactDOM.render(child,ele);\n          }\n        })\n        \n      }else{\n        ele[prop]=props[prop];\n      }\n    }\n\n    // 将第一层DOM节点加到container中\n    container.appendChild(ele);\n  }\n}\nReactDOM.render(\n  ele,\n  document.getElementById('root')\n);\n*/\n\n\n/*\n    1. 原生js，DOM操作（jQ）\n    2. react:开发效率高，性能高\n    3. 环境搭建、创建一个项目、运行\n    4. JSK语法\n*/"],"sourceRoot":""}